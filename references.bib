
@inproceedings{mizrahi_time-based_2013,
  title = {Time-Based Updates in Software Defined Networks},
  isbn = {1-4503-2178-X},
  booktitle = {Proceedings of the Second {{ACM SIGCOMM}} Workshop on {{Hot}} Topics in Software Defined Networking},
  publisher = {{ACM}},
  date = {2013},
  pages = {163-164},
  author = {Mizrahi, Tal and Moses, Yoram},
  file = {/home/emiapwil/Zotero/storage/W82DPUBQ/Time-based Updates in Software Defined Networks.pdf}
}

@inproceedings{dudycz_cant_2016,
  title = {Can't {{Touch This}}: {{Consistent Network Updates}} for {{Multiple Policies}}},
  isbn = {978-1-4673-8891-7},
  url = {http://ieeexplore.ieee.org/document/7579736/},
  doi = {10.1109/DSN.2016.21},
  shorttitle = {Can't {{Touch This}}},
  booktitle = {46th {{Annual IEEE}}/{{IFIP International Conference}} on {{Dependable Systems}} and {{Networks}}},
  publisher = {{IEEE}},
  urldate = {2017-04-05},
  date = {2016-06},
  pages = {133-143},
  author = {Dudycz, Szymon and Ludwig, Arne and Schmid, Stefan},
  file = {/home/emiapwil/Zotero/storage/IR852P43/07579736.pdf},
  note = {00010}
}

@inproceedings{liu_zupdate_2013,
  location = {{New York, NY, USA}},
  title = {{{zUpdate}}: {{Updating Data Center Networks}} with {{Zero Loss}}},
  isbn = {978-1-4503-2056-6},
  url = {http://doi.acm.org/10.1145/2486001.2486005},
  doi = {10.1145/2486001.2486005},
  booktitle = {Proceedings of the {{ACM SIGCOMM}} 2013 {{Conference}} on {{SIGCOMM}}},
  series = {{{SIGCOMM}} '13},
  publisher = {{ACM}},
  date = {2013},
  pages = {411--422},
  keywords = {congestion,data center network,network update},
  author = {Liu, Hongqiang Harry and Wu, Xin and Zhang, Ming and Yuan, Lihua and Wattenhofer, Roger and Maltz, David},
  file = {/home/emiapwil/Zotero/storage/X5QQJJJG/Liu et al. - 2013 - zUpdate Updating Data Center Networks with Zero L.pdf},
  note = {00103}
}

@inproceedings{mcclurg_event-driven_2016,
  location = {{New York, NY, USA}},
  title = {Event-Driven {{Network Programming}}},
  isbn = {978-1-4503-4261-2},
  url = {http://doi.acm.org/10.1145/2908080.2908097},
  doi = {10.1145/2908080.2908097},
  booktitle = {Proceedings of the 37th {{ACM SIGPLAN Conference}} on {{Programming Language Design}} and {{Implementation}}},
  series = {{{PLDI}} '16},
  publisher = {{ACM}},
  date = {2016},
  pages = {369--385},
  keywords = {sdn,network update,software-defined networking,netkat,consistent update,event structure},
  author = {McClurg, Jedidiah and Hojjat, Hossein and Foster, Nate and Černý, Pavol},
  file = {/home/emiapwil/Zotero/storage/G9GJ57MU/McClurg et al. - 2016 - Event-driven network programming.pdf}
}

@inproceedings{jin_netcache_2017,
  location = {{New York, NY, USA}},
  title = {{{NetCache}}: {{Balancing Key}}-{{Value Stores}} with {{Fast In}}-{{Network Caching}}},
  isbn = {978-1-4503-5085-3},
  url = {http://doi.acm.org/10.1145/3132747.3132764},
  doi = {10.1145/3132747.3132764},
  booktitle = {Proceedings of the 26th {{Symposium}} on {{Operating Systems Principles}}},
  series = {{{SOSP}} '17},
  publisher = {{ACM}},
  date = {2017},
  pages = {121--136},
  keywords = {caching,Key-value stores,Programmable switches},
  author = {Jin, Xin and Li, Xiaozhou and Zhang, Haoyu and Soulé, Robert and Lee, Jeongkeun and Foster, Nate and Kim, Changhoon and Stoica, Ion},
  file = {/home/emiapwil/Zotero/storage/M7GK94NC/Jin et al. - 2017 - NetCache Balancing Key-Value Stores with Fast In-.pdf}
}

@inproceedings{jin_dynamic_2014,
  location = {{New York, NY, USA}},
  title = {Dynamic {{Scheduling}} of {{Network Updates}}},
  isbn = {978-1-4503-2836-4},
  url = {http://doi.acm.org/10.1145/2619239.2626307},
  doi = {10.1145/2619239.2626307},
  booktitle = {Proceedings of the 2014 {{ACM Conference}} on {{SIGCOMM}}},
  series = {{{SIGCOMM}} '14},
  publisher = {{ACM}},
  date = {2014},
  pages = {539--550},
  keywords = {network update,software-defined networking},
  author = {Jin, Xin and Liu, Hongqiang Harry and Gandhi, Rohan and Kandula, Srikanth and Mahajan, Ratul and Zhang, Ming and Rexford, Jennifer and Wattenhofer, Roger},
  file = {/home/emiapwil/Zotero/storage/GRIMZWJW/Jin et al. - 2014 - Dynamic scheduling of network updates.pdf}
}

@inproceedings{chole_drmt_2017,
  location = {{New York, NY, USA}},
  title = {{{dRMT}}: {{Disaggregated Programmable Switching}}},
  isbn = {978-1-4503-4653-5},
  url = {http://doi.acm.org/10.1145/3098822.3098823},
  doi = {10.1145/3098822.3098823},
  booktitle = {Proceedings of the {{Conference}} of the {{ACM Special Interest Group}} on {{Data Communication}}},
  series = {{{SIGCOMM}} '17},
  publisher = {{ACM}},
  date = {2017},
  pages = {1--14},
  keywords = {disagreggation,packet processing,Programmable switching,RMT},
  author = {Chole, Sharad and Fingerhut, Andy and Ma, Sha and Sivaraman, Anirudh and Vargaftik, Shay and Berger, Alon and Mendelson, Gal and Alizadeh, Mohammad and Chuang, Shang-Tse and Keslassy, Isaac and Orda, Ariel and Edsall, Tom},
  file = {/home/emiapwil/Zotero/storage/2BINRZX5/Chole et al. - 2017 - dRMT Disaggregated Programmable Switching.pdf}
}

@inproceedings{bosshart_forwarding_2013,
  location = {{New York, NY, USA}},
  title = {Forwarding {{Metamorphosis}}: {{Fast Programmable Match}}-Action {{Processing}} in {{Hardware}} for {{SDN}}},
  isbn = {978-1-4503-2056-6},
  url = {http://doi.acm.org/10.1145/2486001.2486011},
  doi = {10.1145/2486001.2486011},
  booktitle = {Proceedings of the {{ACM SIGCOMM}} 2013 {{Conference}} on {{SIGCOMM}}},
  series = {{{SIGCOMM}} '13},
  publisher = {{ACM}},
  date = {2013},
  pages = {99--110},
  keywords = {sdn,reconfigurable match tables,rmt model},
  author = {Bosshart, Pat and Gibb, Glen and Kim, Hun-Seok and Varghese, George and McKeown, Nick and Izzard, Martin and Mujica, Fernando and Horowitz, Mark},
  file = {/home/emiapwil/Zotero/storage/V7FMKV5T/Bosshart et al. - 2013 - Forwarding Metamorphosis Fast Programmable Match-.pdf}
}

@inproceedings{reitblatt_consistent_2011,
  title = {Consistent Updates for Software-Defined Networks: {{Change}} You Can Believe In!},
  isbn = {1-4503-1059-1},
  publisher = {{ACM}},
  date = {2011},
  pages = {7},
  author = {Reitblatt, Mark and Foster, Nate and Rexford, Jennifer and Walker, David},
  file = {/home/emiapwil/Zotero/storage/HY65I5NC/Consistent Updates for Software-Defined Networks Change You Can Believe In!.pdf;/home/emiapwil/Zotero/storage/VS4KD83N/Consistent Updates for Software-Defined Networks Change You Can Believe In!.pdf}
}

@inproceedings{canini_distributed_2015,
  title = {A Distributed and Robust Sdn Control Plane for Transactional Network Updates},
  url = {http://ieeexplore.ieee.org/xpls/abs_all.jsp?arnumber=7218382},
  booktitle = {2015 {{IEEE}} Conference on Computer Communications ({{INFOCOM}})},
  publisher = {{IEEE}},
  urldate = {2017-01-03},
  date = {2015},
  pages = {190--198},
  author = {Canini, Marco and Kuznetsov, Petr and Levin, Dan and Schmid, Stefan},
  file = {/home/emiapwil/Zotero/storage/BV8P6LYI/07218382.pdf;/home/emiapwil/Zotero/storage/ZTI7BK25/07218382.pdf}
}

@article{bosshart_p4_2014,
  title = {P4: {{Programming Protocol}}-Independent {{Packet Processors}}},
  volume = {44},
  issn = {0146-4833},
  url = {http://doi.acm.org/10.1145/2656877.2656890},
  doi = {10.1145/2656877.2656890},
  number = {3},
  journaltitle = {SIGCOMM Comput. Commun. Rev.},
  date = {2014-07},
  pages = {87--95},
  keywords = {sdn,p4,protocol-independent,reconfigurability},
  author = {Bosshart, Pat and Daly, Dan and Gibb, Glen and Izzard, Martin and McKeown, Nick and Rexford, Jennifer and Schlesinger, Cole and Talayco, Dan and Vahdat, Amin and Varghese, George and Walker, David},
  file = {/home/emiapwil/Zotero/storage/9I9IWUEL/Bosshart et al. - 2014 - P4 Programming protocol-independent packet proces.pdf;/home/emiapwil/Zotero/storage/ZTEQG539/Bosshart et al. - 2014 - P4 Programming protocol-independent packet proces.pdf}
}

@inproceedings{reitblatt_abstractions_2012,
  location = {{New York, NY, USA}},
  title = {Abstractions for {{Network Update}}},
  isbn = {978-1-4503-1419-0},
  url = {http://doi.acm.org/10.1145/2342356.2342427},
  doi = {10.1145/2342356.2342427},
  booktitle = {Proceedings of the {{ACM SIGCOMM}} 2012 {{Conference}} on {{Applications}}, {{Technologies}}, {{Architectures}}, and {{Protocols}} for {{Computer Communication}}},
  series = {{{SIGCOMM}} '12},
  publisher = {{ACM}},
  date = {2012},
  pages = {323--334},
  keywords = {openflow,consistency,software-defined networking,network programming languages,frenetic,planned change},
  author = {Reitblatt, Mark and Foster, Nate and Rexford, Jennifer and Schlesinger, Cole and Walker, David},
  file = {/home/emiapwil/Zotero/storage/DF34RPZ8/Reitblatt et al. - 2012 - Abstractions for Network Update.pdf;/home/emiapwil/Zotero/storage/Y7VSZHZR/Reitblatt et al. - 2012 - Abstractions for Network Update.pdf}
}

@inproceedings{forster_consistent_2016,
  title = {Consistent Updates in Software Defined Networks: {{On}} Dependencies, Loop Freedom, and Blackholes},
  doi = {10.1109/IFIPNetworking.2016.7497232},
  booktitle = {2016 {{IFIP Networking Conference}} ({{IFIP Networking}}) and {{Workshops}}},
  date = {2016-05},
  pages = {1-9},
  keywords = {Routing,software defined networking,telecommunication network routing,telecommunication network topology,computational complexity,software defined networks,Control systems,Software,Computer architecture,Approximation algorithms,Protocols,SDN,Delays,consistency property,consistent updates,destination-based routing,fast blackhole free migration,formal languages,forwarding rule update,greedy algorithms,greedy approach,interval-based routing,ISP topologies,longest-prefix matching,loop free update rules number maximization,loop freedom,memory limits,minimal dependency structure,not updated rules number minimization,NP-hard,resource constraints},
  author = {Förster, K. and Mahajan, R. and Wattenhofer, R.},
  file = {/home/emiapwil/Zotero/storage/YPMUW2I7/Förster et al. - 2016 - Consistent updates in software defined networks O.pdf}
}

@inproceedings{zhou_keysight_2018,
  title = {{{KeySight}}: {{Troubleshooting Programmable Switches}} via {{Scalable High}}-{{Coverage Behavior Tracking}}},
  booktitle = {2018 {{IEEE}} 26th {{International Conference}} on {{Network Protocols}} ({{ICNP}})},
  publisher = {{IEEE}},
  date = {2018},
  pages = {291--301},
  author = {Zhou, Yu and Bi, Jun and Yang, Tong and Gao, Kai and Zhang, Cheng and Cao, Jiamin and Wang, Yangyang},
  file = {/home/emiapwil/Zotero/storage/B9N9EGZ3/Zhou et al. - 2018 - KeySight Troubleshooting Programmable Switches vi.pdf}
}

@inproceedings{mei_adres_2003,
  location = {{Berlin, Heidelberg}},
  title = {{{ADRES}}: {{An Architecture}} with {{Tightly Coupled VLIW Processor}} and {{Coarse}}-{{Grained Reconfigurable Matrix}}},
  isbn = {978-3-540-45234-8},
  abstract = {The coarse-grained reconfigurable architectures have advantages over the traditional FPGAs in terms of delay, area and configuration time. To execute entire applications, most of them combine an instruction set processor(ISP) and a reconfigurable matrix. However, not much attention is paid to the integration of these two parts, which results in high communication overhead and programming difficulty. To address this problem, we propose a novel architecture with tightly coupled very long instruction word (VLIW) processor and coarse-grained reconfigurable matrix. The advantages include simplified programming model, shared resource costs, and reduced communication overhead. To exploit this architecture, our previously developed compiler framework is adapted to the new architecture. The results show that the new architecture has good performance and is very compiler-friendly.},
  booktitle = {Field {{Programmable Logic}} and {{Application}}},
  publisher = {{Springer Berlin Heidelberg}},
  date = {2003},
  pages = {61--70},
  author = {Mei, Bingfeng and Vernalde, Serge and Verkest, Diederik and De Man, Hugo and Lauwereins, Rudy},
  editor = {Y. K. Cheung, Peter and Constantinides, George A.},
  file = {/home/kai/Downloads/Mei et al. - 2003 - ADRES An Architecture with Tightly Coupled VLIW P.pdf}
}

@inproceedings{jose_compiling_2015,
  location = {{Berkeley, CA, USA}},
  title = {Compiling {{Packet Programs}} to {{Reconfigurable Switches}}},
  isbn = {978-1-931971-21-8},
  url = {http://dl.acm.org/citation.cfm?id=2789770.2789778},
  booktitle = {Proceedings of the 12th {{USENIX Conference}} on {{Networked Systems Design}} and {{Implementation}}},
  series = {{{NSDI}}'15},
  publisher = {{USENIX Association}},
  date = {2015},
  pages = {103--115},
  author = {Jose, Lavanya and Yan, Lisa and Varghese, George and McKeown, Nick},
  file = {/home/emiapwil/Zotero/storage/76B8IQLW/Jose et al. - 2015 - Compiling Packet Programs to Reconfigurable Switch.pdf}
}

@inproceedings{hancock_hyper4_2016,
  langid = {english},
  location = {{Irvine, California, USA}},
  title = {{{HyPer4}}: {{Using P4}} to {{Virtualize}} the {{Programmable Data Plane}}},
  isbn = {978-1-4503-4292-6},
  url = {http://dl.acm.org/citation.cfm?doid=2999572.2999607},
  doi = {10.1145/2999572.2999607},
  shorttitle = {{{HyPer4}}},
  abstract = {Through virtualization, single physical data planes can logically support multiple networking contexts. We propose HyPer4 as a portable virtualization solution. HyPer4 provides a general purpose program, written in the P4 dataplane programming language, that may be dynamically conﬁgured to adopt behavior that is functionally equivalent to other P4 programs. HyPer4 extends, through software, the following features to diverse P4capable devices: the ability to logically store multiple programs and either run them in parallel (network slicing) or as hot-swappable snapshots; and virtual networking between programs (supporting program composition or multi-tenant service interaction). HyPer4 permits modifying the set of programs, as well as the virtual network connecting them, at runtime, without disrupting currently active programs. We show that realistic ASICs-based hardware would be capable of running HyPer4 today.},
  eventtitle = {The 12th {{International}}},
  booktitle = {Proceedings of the 12th {{International}} on {{Conference}} on Emerging {{Networking EXperiments}} and {{Technologies}} - {{CoNEXT}} '16},
  publisher = {{ACM Press}},
  urldate = {2019-03-25},
  date = {2016},
  pages = {35-49},
  author = {Hancock, David and van der Merwe, Jacobus},
  options = {useprefix=true},
  file = {/home/emiapwil/Zotero/storage/ITWTVPXX/Hancock and van der Merwe - 2016 - HyPer4 Using P4 to Virtualize the Programmable Da.pdf}
}

@article{vissicchio_safe_2017,
  langid = {english},
  title = {Safe {{Update}} of {{Hybrid SDN Networks}}},
  volume = {25},
  issn = {1063-6692, 1558-2566},
  url = {http://ieeexplore.ieee.org/document/7822964/},
  doi = {10.1109/TNET.2016.2642586},
  abstract = {The support for safe network updates, i.e., live modiﬁcation of device behavior without service disruption, is a critical primitive for current and future networks. Several techniques have been proposed by previous works to implement such a primitive. Unfortunately, existing techniques are not generally applicable to any network architecture, and typically require high overhead (e.g., additional memory) to guarantee strong consistency (i.e., traversal of either initial or ﬁnal paths, but never a mix of them) during the update. In this paper, we deeply study the problem of computing operational sequences to safely and quickly update arbitrary networks. We characterize cases, for which this computation is easy, and revisit previous algorithmic contributions in the new light of our theoretical ﬁndings. We also propose and thoroughly evaluate a generic sequence-computation approach, based on two new algorithms that we combine to overcome limitations of prior proposals. Our approach always ﬁnds an operational sequence that provably guarantees strong consistency throughout the update, with very limited overhead. Moreover, it can be applied to update networks running any combination of centralized and distributed control-planes, including different families of IGPs, OpenFlow or other SDN protocols, and hybrid SDN networks. Our approach therefore supports a large set of use cases, ranging from trafﬁc engineering in IGP-only or SDN-only networks to incremental SDN roll-out and advanced requirements (e.g., per-ﬂow path selection or dynamic network function virtualization) in partial SDN deployments.},
  number = {3},
  journaltitle = {IEEE/ACM Transactions on Networking},
  urldate = {2019-03-18},
  date = {2017-06},
  pages = {1649-1662},
  author = {Vissicchio, Stefano and Vanbever, Laurent and Cittadini, Luca and Xie, Geoffrey G. and Bonaventure, Olivier},
  file = {/home/emiapwil/Zotero/storage/TZNY5MGI/Vissicchio et al. - 2017 - Safe Update of Hybrid SDN Networks.pdf}
}

@inproceedings{friedman_spr_2009,
  langid = {english},
  location = {{Monterey, California, USA}},
  title = {{{SPR}}: {{An Architecture}}-{{Adaptive CGRA Mapping Tool}}},
  isbn = {978-1-60558-410-2},
  url = {http://portal.acm.org/citation.cfm?doid=1508128.1508158},
  doi = {10.1145/1508128.1508158},
  shorttitle = {{{SPR}}},
  abstract = {In this paper we present SPR, a new architecture-adaptive mapping tool for use with Coarse-Grained Reconﬁgurable Architectures (CGRAs). It combines a VLIW style scheduler and FPGA style placement and pipelined routing algorithms with novel mechanisms for integrating and adapting the algorithms to CGRAs. We introduce a latency padding technique that provides feedback from the placer to the scheduler to meet the constraints of a ﬁxed frequency device with conﬁgurable interconnect. Using a new dynamic clustering method during placement, we achieved a 1.3x improvement in throughput of mapped designs. Finally, we introduce an enhancement to the PathFinder algorithm for targeting architectures with a mix of dynamically multiplexed and statically conﬁgurable interconnects. The enhanced algorithm is able to successfully share statically conﬁgured interconnect in a time-multiplexed way, achieving an average channel width reduction of .5x compared to nonshared static interconnect.},
  eventtitle = {Proceeding of the {{ACM}}/{{SIGDA}} International Symposium},
  booktitle = {Proceeding of the {{ACM}}/{{SIGDA}} International Symposium on {{Field}} Programmable Gate Arrays - {{FPGA}} '09},
  publisher = {{ACM Press}},
  urldate = {2019-05-22},
  date = {2009},
  pages = {191},
  author = {Friedman, Stephen and Carroll, Allan and Van Essen, Brian and Ylvisaker, Benjamin and Ebeling, Carl and Hauck, Scott},
  file = {/home/emiapwil/Zotero/storage/Z7V5HAUU/Friedman et al. - 2009 - SPR an architecture-adaptive CGRA mapping tool.pdf}
}

@inproceedings{panda_dynamic_2011,
  langid = {english},
  location = {{Salt Lake City, UT, USA}},
  title = {Dynamic {{Communication}} in a {{Coarse Grained Reconfigurable Array}}},
  isbn = {978-1-61284-277-6},
  url = {http://ieeexplore.ieee.org/document/5771242/},
  doi = {10.1109/FCCM.2011.47},
  abstract = {Coarse Grained Reconfigurable Arrays (CGRAs) are typically very efficient for a single task. However all functional units are required to perform in lock step, wasting resources and making complex programming flows difficult. Massively Parallel Processor Arrays (MPPAs) excel at executing unrelated tasks simultaneously, but limit the amount of resources dedicated to a single task. We propose an architecture with an MPPA’s design flexibility and a CGRA’s throughput, capable of processing and transferring data in a pre-compiled schedule, with dynamic transfers between components. Alternative interconnect strategies are compared for silicon area cost and power utilization.},
  eventtitle = {2011 {{IEEE}} 19th {{Annual International Symposium}} on {{Field}}-{{Programmable Custom Computing Machines}} ({{FCCM}})},
  booktitle = {2011 {{IEEE}} 19th {{Annual International Symposium}} on {{Field}}-{{Programmable Custom Computing Machines}}},
  publisher = {{IEEE}},
  urldate = {2019-07-24},
  date = {2011-05},
  pages = {25-28},
  author = {Panda, Robin and Hauck, Scott},
  file = {/home/emiapwil/Zotero/storage/PIY6CILM/Panda and Hauck - 2011 - Dynamic Communication in a Coarse Grained Reconfig.pdf}
}

@inproceedings{mei_dresc_2002,
  langid = {english},
  location = {{Hong Kong, China}},
  title = {{{DRESC}}: A Retargetable Compiler for Coarse-Grained Reconfigurable Architectures},
  isbn = {978-0-7803-7574-1},
  url = {http://ieeexplore.ieee.org/document/1188678/},
  doi = {10.1109/FPT.2002.1188678},
  shorttitle = {{{DRESC}}},
  abstract = {Coarse-grained reconﬁgurable architectures have become increasingly important in recent years. Automatic design or compiling tools are essential to their success. In this paper, we present a retargetable compiler for a family of coarse-grained reconﬁgurable architectures. Several key issues are addressed. Program analysis and transformation prepare dataﬂow for scheduling. Architecture abstraction generates an internal graph representation from a concrete architecture description. A modulo scheduling algorithm is key to exploit parallelism and achieve high performance. The experimental results show up to 28.7 instructions per cycle (IPC) over tested kernels.},
  eventtitle = {2002 {{IEEE International Conference}} on {{Field}}-{{Programmable Technology}} ({{FPT}})},
  booktitle = {2002 {{IEEE International Conference}} on {{Field}}-{{Programmable Technology}}, 2002. ({{FPT}}). {{Proceedings}}.},
  publisher = {{IEEE}},
  urldate = {2019-07-25},
  date = {2002},
  pages = {166-173},
  author = {Mei, Bingfeng and Vernalde, S. and Verkest, D. and De Man, H. and Lauwereins, R.},
  file = {/home/emiapwil/Zotero/storage/2ET7XY78/Bingfeng Mei et al. - 2002 - DRESC a retargetable compiler for coarse-grained .pdf}
}

@inproceedings{rau_iterative_1994,
  title = {Iterative {{Module}} Scheduling: {{An Algorithm}} for {{Software Pipelining Loops}}},
  booktitle = {Proceedings of {{MICRO}}-27. {{The}} 27th {{Annual IEEE}}/{{ACM International Symposium}} on {{Microarchitecture}}},
  publisher = {{IEEE}},
  date = {1994},
  pages = {63-74},
  author = {Rau, B Ramakrishna},
  file = {/home/emiapwil/Zotero/storage/7BLWDA6J/Rau - 1994 - Iterative module scheduling An algorithm for soft.pdf}
}

@article{mcmurchie_pathfinder_nodate,
  langid = {english},
  title = {{{PathFinder}}: {{A Negotiation}}-{{Based Performance}}-{{Driven Router}} for {{FPGAs}}},
  abstract = {Routing FPGAs is a challenging problem because of the relative scarcity of routing resources, both wires and connection points. This can lead either to slow implementations caused by long wiring paths that avoid congestion or a failure to route all signals. This paper presents PathFinder, a router that balances the goals of performance and routability. PathFinder uses an iterative algorithm that converges to a solution in which all signals are routed while achieving close to the optimal performance allowed by the placement. Routability is achieved by forcing signals to negotiate for a resource and thereby determine which signal needs the resource most. Delay is minimized by allowing the more critical signals a greater say in this negotiation. Because PathFinder requires only a directed graph to describe the architecture of routing resources, it adapts readily to a wide variety of FPGA architectures such as Triptych, Xilinx 3000 and mesh-connected arrays of FPGAs. The results of routing ISCAS benchmarks on the Triptych FPGA architecture show an average increase of only 4.5\% in critical path delay over the optimum delay for a placement. Routes of ISCAS benchmarks on the Xilinx 3000 architecture show a greater completion rate than commercial tools, as well as 11\% faster implementations.},
  pages = {7},
  author = {McMurchie, Larry and Ebeling, Carl},
  file = {/home/emiapwil/Zotero/storage/7N3WM2UP/McMurchie and Ebeling - PathFinder A Negotiation-Based Performance-Driven.pdf}
}

@inproceedings{dally_route_2001,
  langid = {english},
  location = {{Las Vegas, NV, USA}},
  title = {Route {{Packets}}, {{Not Wires}}: {{On}}-{{Chip Interconnection Networks}}},
  isbn = {978-1-58113-297-7},
  url = {http://ieeexplore.ieee.org/lpdocs/epic03/wrapper.htm?arnumber=935594},
  doi = {10.1109/DAC.2001.935594},
  shorttitle = {Route Packets, Not Wires},
  abstract = {Using on-chip interconnection networks in place of ad-hoc global wiring structures the top level wires on a chip and facilitates modular design. With this approach, system modules (processors, memories, peripherals, etc...) communicate by sending packets to one another over the network. The structured network wiring gives well-controlled electrical parameters that eliminate timing iterations and enable the use of high-performance circuits to reduce latency and increase bandwidth. The area overhead required to implement an on-chip network is modest, we estimate 6.6\%. This paper introduces the concept of on-chip networks, sketches a simple network, and discusses some challenges in the architecture and design of these networks.},
  eventtitle = {2001. 38th {{Design Automation Conference}}},
  booktitle = {Proceedings of the 38th {{Design Automation Conference}} ({{IEEE Cat}}. {{No}}.{{01CH37232}})},
  publisher = {{ACM}},
  urldate = {2019-07-25},
  date = {2001},
  pages = {684-689},
  author = {Dally, W.J. and Towles, B.},
  file = {/home/emiapwil/Zotero/storage/CDXERYMY/Dally and Towles - 2001 - Route packets, not wires on-chip interconnection .pdf}
}

@article{catania_cycle-accurate_2016,
  langid = {english},
  title = {Cycle-{{Accurate Network}} on {{Chip Simulation}} with {{Noxim}}},
  volume = {27},
  issn = {10493301},
  url = {http://dl.acm.org/citation.cfm?doid=2982568.2953878},
  doi = {10.1145/2953878},
  number = {1},
  journaltitle = {ACM Transactions on Modeling and Computer Simulation},
  shortjournal = {ACM Trans. Model. Comput. Simul.},
  urldate = {2019-07-25},
  date = {2016-08-16},
  pages = {1-25},
  author = {Catania, Vincenzo and Mineo, Andrea and Monteleone, Salvatore and Palesi, Maurizio and Patti, Davide},
  file = {/home/emiapwil/Zotero/storage/YIUQ7E6R/Catania et al. - 2016 - Cycle-Accurate Network on Chip Simulation with Nox.pdf}
}

@inproceedings{besta_slim_2018,
  langid = {english},
  location = {{Williamsburg, VA, USA}},
  title = {Slim {{NoC}}: {{A Low}}-{{Diameter On}}-{{Chip Network Topology}} for {{High Energy Efficiency}} and {{Scalability}}},
  isbn = {978-1-4503-4911-6},
  url = {http://dl.acm.org/citation.cfm?doid=3173162.3177158},
  doi = {10.1145/3173162.3177158},
  shorttitle = {Slim {{NoC}}},
  abstract = {Emerging chips with hundreds and thousands of cores require networks with unprecedented energy/area efficiency and scalability. To address this, we propose Slim NoC (SN): a new on-chip network design that delivers significant improvements in efficiency and scalability compared to the state-of-the-art. The key idea is to use two concepts from graph and number theory, degree-diameter graphs combined with non-prime finite fields, to enable the smallest number of ports for a given core count. SN is inspired by state-of-the-art off-chip topologies; it identifies and distills their advantages for NoC settings while solving several key issues that lead to significant overheads on-chip. SN provides NoC-specific layouts, which further enhance area/energy efficiency. We show how to augment SN with state-of-the-art router microarchitecture schemes such as Elastic Links, to make the network even more scalable and efficient. Our extensive experimental evaluations show that SN outperforms both traditional low-radix topologies (e.g., meshes and tori) and modern high-radix networks (e.g., various Flattened Butterflies) in area, latency, throughput, and static/dynamic power consumption for both synthetic and real workloads. SN provides a promising direction in scalable and energy-efficient NoC topologies.},
  eventtitle = {The {{Twenty}}-{{Third International Conference}}},
  booktitle = {Proceedings of the {{Twenty}}-{{Third International Conference}} on {{Architectural Support}} for {{Programming Languages}} and {{Operating Systems}}  - {{ASPLOS}} '18},
  publisher = {{ACM Press}},
  urldate = {2019-07-25},
  date = {2018},
  pages = {43-55},
  author = {Besta, Maciej and Hassan, Syed Minhaj and Yalamanchili, Sudhakar and Ausavarungnirun, Rachata and Mutlu, Onur and Hoefler, Torsten},
  file = {/home/emiapwil/Zotero/storage/47HFHW2E/Besta et al. - 2018 - Slim NoC A Low-Diameter On-Chip Network Topology .pdf}
}

@online{intel_intel_2019,
  title = {Intel {{Flexpipe}}},
  url = {https://www.intel.com/content/dam/www/public/us/en/documents/product-briefs/ethernet-switch-fm6000-series-brief.pdf},
  urldate = {2019-07-28},
  date = {2019},
  author = {Intel},
  file = {/home/emiapwil/Zotero/storage/LKAI349R/ethernet-switch-fm6000-series-brief.pdf}
}

@inproceedings{bitar_bringing_2015,
  langid = {english},
  location = {{Queenstown, New Zealand}},
  title = {Bringing Programmability to the Data Plane: {{Packet}} Processing with a {{NoC}}-Enhanced {{FPGA}}},
  isbn = {978-1-4673-9091-0},
  url = {http://ieeexplore.ieee.org/document/7393125/},
  doi = {10.1109/FPT.2015.7393125},
  shorttitle = {Bringing Programmability to the Data Plane},
  abstract = {Modern computer networks need components that can evolve to support both the latest bandwidth demands and new protocols and features. To address this need, we propose a new programmable packet processor architecture built from an FPGA containing an embedded Network-on-Chip (NoC). The architecture is highly ﬂexible, providing more programmability than is possible in an ASIC-based design, while supporting throughputs of 400 and 800 Gb/s. Additionally, we show that our design is 1.7× and 3.2× more area efﬁcient, and achieves 1.5× and 3.7× lower latency than the best previously proposed FPGAbased packet processor on complex and simple applications, respectively. Lastly, we explore various ways a designer can take advantage of the ﬂexibility available in this architecture. I. INTRODUCTION Computer networks have seen rapid evolution over the past decade. “Cloud computing” and the “Internet of Things” are becoming household terms, as we move to an era where computational power is ofﬂoaded from the PC and onto data centers located miles away. This surge in demand on networking capabilities has led to new network protocols and functionalities being created, updated and enhanced. The implementation of these protocols and functionalities has proven challenging in current network infrastructures, causing a demand for “programmable networks”.},
  eventtitle = {2015 {{International Conference}} on {{Field Programmable Technology}} ({{FPT}})},
  booktitle = {2015 {{International Conference}} on {{Field Programmable Technology}} ({{FPT}})},
  publisher = {{IEEE}},
  urldate = {2019-07-28},
  date = {2015-12},
  pages = {24-31},
  author = {Bitar, Andrew and Abdelfattah, Mohamed S. and Betz, Vaughn},
  file = {/home/emiapwil/Zotero/storage/Q2W5IYK9/Bitar et al. - 2015 - Bringing programmability to the data plane Packet.pdf;/home/emiapwil/Zotero/storage/RWGNHRVC/Bitar et al. - 2015 - Bringing programmability to the data plane Packet.pdf;/home/emiapwil/Zotero/storage/Y4H4YCLF/Bitar et al. - 2015 - Bringing programmability to the data plane Packet.pdf}
}

@inproceedings{abdelfattah_take_2015,
  langid = {english},
  location = {{Monterey, California, USA}},
  title = {Take the {{Highway}}: {{Design}} for {{Embedded NoCs}} on {{FPGAs}}},
  isbn = {978-1-4503-3315-3},
  url = {http://dl.acm.org/citation.cfm?doid=2684746.2689074},
  doi = {10.1145/2684746.2689074},
  shorttitle = {Take the {{Highway}}},
  abstract = {We explore the addition of a fast embedded network-on-chip (NoC) to augment the FPGA’s existing wires and switches, and help interconnect large applications. A ﬂexible interface between the FPGA fabric and the embedded NoC allows modules of varying widths and frequencies to transport data over the NoC. We study both latency-insensitive and latency-sensitive design styles and present the constraints for implementing each type of communication on the embedded NoC. Our application case study with image compression shows that an embedded NoC improves frequency by 10–80\%, reduces utilization of scarce long wires by 40\% and makes design easier and more predictable. Additionally, we leverage the embedded NoC in creating a programmable Ethernet switch that can support up to 819 Gb/s on FPGAs.},
  eventtitle = {The 2015 {{ACM}}/{{SIGDA International Symposium}}},
  booktitle = {Proceedings of the 2015 {{ACM}}/{{SIGDA International Symposium}} on {{Field}}-{{Programmable Gate Arrays}} - {{FPGA}} '15},
  publisher = {{ACM Press}},
  urldate = {2019-07-29},
  date = {2015},
  pages = {98-107},
  author = {Abdelfattah, Mohamed S. and Bitar, Andrew and Betz, Vaughn},
  file = {/home/emiapwil/Zotero/storage/ZBJ8VSCI/Abdelfattah et al. - 2015 - Take the Highway Design for Embedded NoCs on FPGA.pdf}
}

@incollection{hahnle_kupc_2019,
  langid = {english},
  location = {{Cham}},
  title = {{{KupC}}: {{A Formal Tool}} for {{Modeling}} and {{Verifying Dynamic Updating}} of {{C Programs}}},
  volume = {11424},
  isbn = {978-3-030-16721-9 978-3-030-16722-6},
  url = {http://link.springer.com/10.1007/978-3-030-16722-6_17},
  shorttitle = {{{KupC}}},
  abstract = {Dynamic Software Updating (DSU) is a useful technique for updating running software without incurring any downtime. Its correctness must be guaranteed because updating a running software is a complicated and safety-critical process. In this paper, we present a formal tool called KupC for modeling and verifying dynamic updating of C programs. The tool is built on K–a formal semantic framework for programming languages. We formalize a patch-based dynamic updating mechanism in K based on the formal executable operational semantics of C. The formalization automatically yields an interpreter and several veriﬁcation tools, which can be used to formally analyze the correctness of dynamic updating for C programs. To our knowledge, KupC is the ﬁrst formal tool for code-level veriﬁcation of dynamic software updating.},
  booktitle = {Fundamental {{Approaches}} to {{Software Engineering}}},
  publisher = {{Springer International Publishing}},
  urldate = {2019-08-10},
  date = {2019},
  pages = {299-305},
  author = {Qian, Jiaqi and Zhang, Min and Wang, Yi and Ogata, Kazuhiro},
  editor = {Hähnle, Reiner and van der Aalst, Wil},
  options = {useprefix=true},
  file = {/home/emiapwil/Zotero/storage/FRUN4N44/Qian et al. - 2019 - KupC A Formal Tool for Modeling and Verifying Dyn.pdf},
  doi = {10.1007/978-3-030-16722-6_17}
}

@article{seifzadeh_survey_2013,
  langid = {english},
  title = {A Survey of Dynamic Software Updating: {{A SURVEY OF DYNAMIC SOFTWARE UPDATING}}},
  volume = {25},
  issn = {20477473},
  url = {http://doi.wiley.com/10.1002/smr.1556},
  doi = {10.1002/smr.1556},
  shorttitle = {A Survey of Dynamic Software Updating},
  abstract = {Application update at run-time remains a challenging issue in software engineering. There are many techniques with different evaluation metrics, resulting in different behaviours in the application being updated. In this paper, we provide an extensive review of research work on dynamic software updating. A framework for the evaluation of dynamic updating features is developed, and the articles are categorized and discussed based on the provided framework. Areas of online software maintenance requiring further research are also identiﬁed and highlighted. This information is deemed to not only assist practitioners in selecting appropriate dynamic updating techniques for their systems, but also to facilitate the ongoing and continuous research in the ﬁeld of dynamic software updating. Copyright © 2012 John Wiley \& Sons, Ltd.},
  number = {5},
  journaltitle = {Journal of Software: Evolution and Process},
  urldate = {2019-08-10},
  date = {2013-05},
  pages = {535-568},
  author = {Seifzadeh, Habib and Abolhassani, Hassan and Moshkenani, Mohsen Sadighi},
  file = {/home/emiapwil/Zotero/storage/HNN897YA/Seifzadeh et al. - 2013 - A survey of dynamic software updating A SURVEY OF.pdf}
}

@thesis{hicks_dynamic_2001,
  langid = {english},
  title = {{{DYNAMIC SOFTWARE UPDATING}}},
  institution = {{University of Pennsylvania}},
  date = {2001},
  author = {Hicks, Michael},
  file = {/home/emiapwil/Zotero/storage/K7VLHZAE/Hicks - DYNAMIC SOFTWARE UPDATING.pdf}
}

@article{hicks_dynamic_2005,
  title = {Dynamic {{Software Updating}}},
  volume = {27},
  issn = {0164-0925},
  url = {http://doi.acm.org/10.1145/1108970.1108971},
  doi = {10.1145/1108970.1108971},
  number = {6},
  journaltitle = {ACM Transactions on Programming Languages and Systems (TOPLAS)},
  date = {2005-11},
  pages = {1049-1096},
  keywords = {Dynamic software updating,typed assembly language},
  author = {Hicks, Michael and Nettles, Scott},
  file = {/home/emiapwil/Zotero/storage/4Y7BFLLY/Hicks - Dynamic Software Updating.pdf}
}

@inproceedings{ellison_executable_2012,
  location = {{Philadelphia, PA, USA}},
  title = {An {{Executable Formal Semantics}} of {{C}} with {{Applications}}},
  isbn = {978-1-4503-1083-3},
  url = {http://doi.acm.org/10.1145/2103656.2103719},
  doi = {10.1145/2103656.2103719},
  booktitle = {Proceedings of the 39th {{Annual ACM SIGPLAN}}-{{SIGACT Symposium}} on {{Principles}} of {{Programming Languages}}},
  series = {{{POPL}} '12},
  publisher = {{ACM}},
  date = {2012},
  pages = {533-544},
  keywords = {semantics,C,k},
  author = {Ellison, Chucky and Rosu, Grigore},
  file = {/home/emiapwil/Zotero/storage/2VYAKYKW/2011-09-30-CK-MVD.pdf;/home/emiapwil/Zotero/storage/VH72CZ9R/Ellison and Rosu - 2012 - An Executable Formal Semantics of C with Applicati.pdf}
}

@article{rosu_overview_2010,
  langid = {english},
  title = {An Overview of the {{K}} Semantic Framework},
  volume = {79},
  issn = {15678326},
  url = {https://linkinghub.elsevier.com/retrieve/pii/S1567832610000160},
  doi = {10.1016/j.jlap.2010.03.012},
  abstract = {K is an executable semantic framework in which programming languages, calculi, as well as type systems or formal analysis tools can be deﬁned, making use of conﬁgurations, computations and rules. Conﬁgurations organize the system/program state in units called cells, which are labeled and can be nested. Computations carry “computational meaning” as special nested list structures sequentializing computational tasks, such as fragments of program; in particular, computations extend the original language or calculus syntax. K (rewrite) rules generalize conventional rewrite rules by making explicit which parts of the term they read, write, or do not care about. This distinction makes K a suitable framework for deﬁning truly concurrent languages or calculi, even in the presence of sharing. Since computations can be handled like any other terms in a rewriting environment, that is, they can be matched, moved from one place to another in the original term, modiﬁed, or even deleted, K is particularly suitable for deﬁning control-intensive language features such as abrupt termination, exceptions, or call/cc.},
  number = {6},
  journaltitle = {The Journal of Logic and Algebraic Programming},
  urldate = {2019-08-10},
  date = {2010-08},
  pages = {397-434},
  author = {Roșu, Grigore and Șerbănută, Traian Florin},
  file = {/home/emiapwil/Zotero/storage/45GCH93Y/Roșu and Șerbănută - 2010 - An overview of the K semantic framework.pdf}
}

@report{kheradmand-rosu-2018-tr,
  title = {{{P4K}}: {{A Formal Semantics}} of {{P4}} and {{Applications}}},
  number = {https://arxiv.org/abs/1804.01468},
  institution = {{University of Illinois at Urbana-Champaign}},
  date = {2018-04},
  author = {Kheradmand, Ali and Roşu, Grigore},
  file = {/home/emiapwil/Zotero/storage/PZARB94S/Kheradmand and Rosu - P4K A Formal Semantics of P4 and Applications.pdf}
}

@unpublished{winskel_lecture_nodate,
  title = {Lecture {{Notes onDenotational Semanticsfor Part II}} of the {{Computer Science Tripos}}},
  author = {Winskel, Glynn},
  file = {/home/emiapwil/Zotero/storage/7TPGA9WE/dens.pdf}
}

@book{harper_practical_2007,
  langid = {english},
  title = {Practical {{Foundations}} for {{Programming Languages}}},
  pagetotal = {404},
  date = {2007},
  author = {Harper, Robert},
  file = {/home/emiapwil/Zotero/storage/3BWSCRJT/Harper - Practical Foundations for Programming Languages.pdf}
}

@article{rankooh_itsat_2015,
  langid = {english},
  title = {{{ITSAT}}: {{An Efficient SAT}}-{{Based Temporal Planner}}},
  volume = {53},
  issn = {1076-9757},
  url = {https://jair.org/index.php/jair/article/view/10950},
  doi = {10.1613/jair.4697},
  shorttitle = {{{ITSAT}}},
  abstract = {Planning as satisﬁability is known as an eﬃcient approach to deal with many types of planning problems. However, this approach has not been competitive with the state-space based methods in temporal planning. This paper describes ITSAT as an eﬃcient SAT-based (satisﬁability based) temporal planner capable of temporally expressive planning. The novelty of ITSAT lies in the way it handles temporal constraints of given problems without getting involved in the diﬃculties of introducing continuous variables into the corresponding satisﬁability problems. We also show how, as in SAT-based classical planning, carefully devised preprocessing and encoding schemata can considerably improve the eﬃciency of SAT-based temporal planning. We present two preprocessing methods for mutex relation extraction and action compression. We also show that the separation of causal and temporal reasoning enables us to employ compact encodings that are based on the concept of parallel execution semantics. Although such encodings have been shown to be quite eﬀective in classical planning, ITSAT is the ﬁrst temporal planner utilizing this type of encoding. Our empirical results show that not only does ITSAT outperform the state-of-the-art temporally expressive planners, it is also competitive with the fast temporal planners that cannot handle required concurrency.},
  journaltitle = {Journal of Artificial Intelligence Research},
  urldate = {2019-08-13},
  date = {2015-07-30},
  pages = {541-632},
  author = {Rankooh, Masood Feyzbakhsh and Ghassem-Sani, Gholamreza},
  file = {/home/emiapwil/Zotero/storage/RKFCTLKJ/Rankooh and Ghassem-Sani - 2015 - ITSAT An Efficient SAT-Based Temporal Planner.pdf}
}

@inproceedings{kautz_planning_1992,
  location = {{Vienna, Austria}},
  title = {Planning {{As Satisfiability}}},
  isbn = {0-471-93608-1},
  url = {http://dl.acm.org/citation.cfm?id=145448.146725},
  booktitle = {Proceedings of the 10th {{European Conference}} on {{Artificial Intelligence}}},
  series = {{{ECAI}} '92},
  publisher = {{John Wiley \& Sons, Inc.}},
  date = {1992},
  pages = {359-363},
  author = {Kautz, Henry and Selman, Bart},
  file = {/home/emiapwil/Zotero/storage/AF7MW6DI/Kautz and Selman - 1992 - Planning As Satisfiability.pdf}
}

@inproceedings{saquetti_hard_2019,
  location = {{Beijing, China}},
  title = {Hard {{Virtualization}} of {{P4}}-Based {{Switches}} with {{VirtP4}}},
  isbn = {978-1-4503-6886-5},
  url = {http://doi.acm.org/10.1145/3342280.3342314},
  doi = {10.1145/3342280.3342314},
  booktitle = {Proceedings of the 2019 {{Conference}} of the {{ACM Special Interest Group}} on {{Data Communication}}},
  series = {{{SIGCOMM}} '19},
  publisher = {{ACM}},
  date = {2019},
  pages = {80-81},
  keywords = {Virtualization,P4,NetFPGA-SUME,Programmable Forwarding Planes,Simple Sume Switch},
  author = {Saquetti, Mateus and Bueno, Guilherme and Cordeiro, Weverton and Azambuja, José Rodrigo}
}

@inproceedings{zheng_p4visor_2018,
  location = {{Heraklion, Greece}},
  title = {{{P4Visor}}: {{Lightweight Virtualization}} and {{Composition Primitives}} for {{Building}} and {{Testing Modular Programs}}},
  isbn = {978-1-4503-6080-7},
  url = {http://doi.acm.org/10.1145/3281411.3281436},
  doi = {10.1145/3281411.3281436},
  booktitle = {Proceedings of the 14th {{International Conference}} on {{Emerging Networking EXperiments}} and {{Technologies}}},
  series = {{{CoNEXT}} '18},
  publisher = {{ACM}},
  date = {2018},
  pages = {98-111},
  keywords = {programmable data plane,code merge,testing},
  author = {Zheng, Peng and Benson, Theophilus and Hu, Chengchen},
  file = {/home/emiapwil/Zotero/storage/KGDAWZRB/Zheng et al. - 2018 - P4Visor lightweight virtualization and compositio.pdf},
  ids = {zheng\_p4visor\_2018-1}
}

@inproceedings{saquetti_virtp4_2019,
  langid = {english},
  location = {{Rio de Janeiro, Brazil}},
  title = {{{VirtP4}}: {{An Architecture}} for {{P4 Virtualization}}},
  isbn = {978-1-72813-510-6},
  url = {https://ieeexplore.ieee.org/document/8778237/},
  doi = {10.1109/IPDPSW.2019.00021},
  shorttitle = {{{VirtP4}}},
  abstract = {This paper presents VirtP4, an architecture for the virtualization of P4-based programmable forwarding planes. VirtP4 provides parallel execution of true independent virtual switch instances with assistance of trafﬁc control and packet routing. The architecture is implemented in a NetFPGA-SUME board running two virtual switches, a L2 Switch and a Router. The area occupation data show the possibility of implementing up to 13 P4 instances in parallel. When compared to related works, performance results exhibit improvements up to 3 orders of magnitude for bandwidth and 2 orders of magnitude for latency.},
  eventtitle = {2019 {{IEEE International Parallel}} and {{Distributed Processing Symposium Workshops}} ({{IPDPSW}})},
  booktitle = {2019 {{IEEE International Parallel}} and {{Distributed Processing Symposium Workshops}} ({{IPDPSW}})},
  publisher = {{IEEE}},
  urldate = {2019-08-14},
  date = {2019-05},
  pages = {75-78},
  author = {Saquetti, Mateus and Bueno, Guilherme and Cordeiro, Weverton and Azambuja, Jose Rodrigo},
  file = {/home/emiapwil/Zotero/storage/WDADPVVC/Saquetti et al. - 2019 - VirtP4 An Architecture for P4 Virtualization.pdf}
}

@article{zhang_hypervdp_2019,
  langid = {english},
  title = {{{HyperVDP}}: {{High}}-{{Performance Virtualization}} of the {{Programmable Data Plane}}},
  volume = {37},
  issn = {0733-8716, 1558-0008},
  url = {https://ieeexplore.ieee.org/document/8624520/},
  doi = {10.1109/JSAC.2019.2894308},
  shorttitle = {{{HyperVDP}}},
  abstract = {With the advent of P4-speciﬁc programmable data plane (PDP), network functions (NFs) can be ofﬂoaded into the PDP to achieve high performance guaranteed by hardware. Meanwhile, CPU powers consumed by NFs can be released to user applications. However, as more and more NFs can be ofﬂoaded, several problems rooted inside the PDP severely hinder it from facilitating this ofﬂoading trend. 1) The existing PDP provides the exclusive data plane abstraction where different NFs cannot operate the same data plane. 2) The PDP is hardly able to deploy NFs in a “hitless” manner. In this paper, we propose HyperVDP as a high-performance data plane hypervisor to provision non-exclusive abstraction and uninterrupted reconﬁgurability on the P4-speciﬁc PDP. To achieve virtualization, we design several innovative techniques to equally express functions of all programmable elements in the P4-speciﬁc PDP. We implement the prototype of HyperVDP on different target platforms, and evaluate different target-based prototypes by comparing with their counterparts. Results show that BMv2-target HyperVDP averagely prevails over its counterpart 2.5× in performance and 4× in resource efﬁciency. DPDK-target HyperVDP performs comparably to its counterparts while offering virtualization features which neither of its counterparts could provide.},
  number = {3},
  journaltitle = {IEEE Journal on Selected Areas in Communications},
  urldate = {2019-08-14},
  date = {2019-03},
  pages = {556-569},
  author = {Zhang, Cheng and Bi, Jun and Zhou, Yu and Wu, Jianping},
  file = {/home/emiapwil/Zotero/storage/Y6UKSHLU/Zhang et al. - 2019 - HyperVDP High-Performance Virtualization of the P.pdf}
}

@inproceedings{gupta_sonata_2018,
  langid = {english},
  location = {{Budapest, Hungary}},
  title = {Sonata: Query-Driven Streaming Network Telemetry},
  isbn = {978-1-4503-5567-4},
  url = {http://dl.acm.org/citation.cfm?doid=3230543.3230555},
  doi = {10.1145/3230543.3230555},
  shorttitle = {Sonata},
  abstract = {Managing and securing networks requires collecting and analyzing network traffic data in real time. Existing telemetry systems do not allow operators to express the range of queries needed to perform management or scale to large traffic volumes and rates. We present Sonata, an expressive and scalable telemetry system that coordinates joint collection and analysis of network traffic. Sonata provides a declarative interface to express queries for a wide range of common telemetry tasks; to enable real-time execution, Sonata partitions each query across the stream processor and the data plane, running as much of the query as it can on the network switch, at line rate. To optimize the use of limited switch memory, Sonata dynamically refines each query to ensure that available resources focus only on traffic that satisfies the query. Our evaluation shows that Sonata can support a wide range of telemetry tasks while reducing the workload for the stream processor by as much as seven orders of magnitude compared to existing telemetry systems.},
  eventtitle = {The 2018 {{Conference}} of the {{ACM Special Interest Group}}},
  booktitle = {Proceedings of the 2018 {{Conference}} of the {{ACM Special Interest Group}} on {{Data Communication}}  - {{SIGCOMM}} '18},
  publisher = {{ACM Press}},
  urldate = {2019-08-18},
  date = {2018},
  pages = {357-371},
  author = {Gupta, Arpit and Harrison, Rob and Canini, Marco and Feamster, Nick and Rexford, Jennifer and Willinger, Walter},
  file = {/home/emiapwil/Zotero/storage/2YAGB55J/Gupta et al. - 2018 - Sonata query-driven streaming network telemetry.pdf}
}

@inproceedings{dang_netpaxos_2015,
  langid = {english},
  location = {{Santa Clara, California}},
  title = {{{NetPaxos}}: Consensus at Network Speed},
  isbn = {978-1-4503-3451-8},
  url = {http://dl.acm.org/citation.cfm?doid=2774993.2774999},
  doi = {10.1145/2774993.2774999},
  shorttitle = {{{NetPaxos}}},
  abstract = {This paper explores the possibility of implementing the widely deployed Paxos consensus protocol in network devices. We present two different approaches: (i) a detailed design description for implementing the full Paxos logic in SDN switches, which identiﬁes a sufﬁcient set of required OpenFlow extensions; and (ii) an alternative, optimistic protocol which can be implemented without changes to the OpenFlow API, but relies on assumptions about how the network orders messages. Although neither of these protocols can be fully implemented without changes to the underlying switch ﬁrmware, we argue that such changes are feasible in existing hardware. Moreover, we present an evaluation that suggests that moving Paxos logic into the network would yield signiﬁcant performance beneﬁts for distributed applications.},
  eventtitle = {The 1st {{ACM SIGCOMM Symposium}}},
  booktitle = {Proceedings of the 1st {{ACM SIGCOMM Symposium}} on {{Software Defined Networking Research}} - {{SOSR}} '15},
  publisher = {{ACM Press}},
  urldate = {2019-09-28},
  date = {2015},
  pages = {1-7},
  author = {Dang, Huynh Tu and Sciascia, Daniele and Canini, Marco and Pedone, Fernando and Soulé, Robert},
  file = {/home/emiapwil/Zotero/storage/CGIY2X3H/Dang et al. - 2015 - NetPaxos consensus at network speed.pdf}
}

@online{intel_ethernet_2019,
  langid = {english},
  title = {Ethernet {{Switch FM6764}}},
  url = {https://ark.intel.com/content/www/us/en/ark/products/76304/intel-ethernet-switch-fm6764.html},
  abstract = {Intel® Ethernet Switch FM6764 quick reference guide including specifications, features, pricing, compatibility, design documentation, ordering codes, spec codes and more.},
  urldate = {2019-09-28},
  date = {2019},
  author = {Intel},
  file = {/home/emiapwil/Zotero/storage/XAE7JSSA/intel-ethernet-switch-fm6764.html}
}

@online{broadcom_bcm56880_2019,
  title = {{{BCM56880}} - {{High}}-{{Capacity StrataXGS}}® {{Trident}} 4 {{Ethernet Switch Series}}},
  url = {https://www.broadcom.com/products/ethernet-connectivity/switching/strataxgs/bcm56880-series},
  abstract = {Broadcom's StrataXGS® Trident 4 is the world’s first 7nm compiler-programmable switch with bandwidth up to 12.8 Tb/s.},
  urldate = {2019-09-28},
  date = {2019},
  author = {Broadcom},
  file = {/home/emiapwil/Zotero/storage/CL9E7UGE/bcm56880-series.html}
}

@online{barefoot_networks_tofino_2019,
  title = {Tofino 2 | {{Barefoot}}},
  url = {https://barefootnetworks.com/products/brief-tofino-2/},
  journaltitle = {Barefoot Networks},
  urldate = {2019-09-28},
  date = {2019},
  author = {Barefoot Networks},
  file = {/home/emiapwil/Zotero/storage/R9Z4WHVA/brief-tofino-2.html}
}

@online{p4.org_p4runtime_2019,
  title = {{{P4Runtime}}},
  url = {https://p4.org/p4-runtime/},
  urldate = {2019-09-28},
  date = {2019},
  author = {P4.org}
}

@online{p4.org_p4c_2019,
  title = {P4c: {{P4}}\_16 Prototype Compiler},
  url = {https://github.com/p4lang/p4c},
  urldate = {2019-09-28},
  date = {2019},
  author = {{p4.org}}
}

@misc{p4.org_api_working_group_p4runtime_2019,
  title = {{{P4Runtime Specification}} Version 1.0.0},
  url = {https://s3-us-west-2.amazonaws.com/p4runtime/docs/v1.0.0/P4Runtime-Spec.pdf},
  date = {2019},
  author = {P4.org API Working Group},
  file = {/home/emiapwil/Zotero/storage/3KCABGBX/P4Runtime-Spec.pdf}
}

@article{chen_dynamic_2016,
  title = {Dynamic Reconfigurable Ternary Content Addressable Memory for {{OpenFlow}}-{{Compliant}} Low-Power Packet Processing},
  volume = {63},
  number = {10},
  journaltitle = {IEEE Transactions on Circuits \& Systems I Regular Papers},
  date = {2016},
  pages = {1661-1672},
  author = {Chen, T. S. and Lee, D. Y. and Liu, T. T. and Wu, A. Y.},
  file = {/home/emiapwil/Zotero/storage/CI43N8MY/Chen et al. - 2016 - Dynamic reconfigurable ternary content addressable.pdf}
}

@article{eatherton_tree_2004,
  langid = {english},
  title = {Tree Bitmap: Hardware/Software {{IP}} Lookups with Incremental Updates},
  volume = {34},
  issn = {01464833},
  url = {http://portal.acm.org/citation.cfm?doid=997150.997160},
  doi = {10.1145/997150.997160},
  shorttitle = {Tree Bitmap},
  abstract = {Even with the significant focus on IP address lookup in the published literature as well as focus on this market by commercial semiconductor vendors, there is still a challenge for router architects to find solutions that simultaneously meet 3 criteria: scaling in terms of lookup speeds as well as table sizes, the ability to perform high speed updates, and the ability to fit into the overall memory architecture of an Level 3 forwarding engine or packet processor with low systems cost overhead. In this paper, we describe a scheme that meets all three criteria. By contrast, published and commercial semiconductor solutions meet some but not all of these three criteria.},
  number = {2},
  journaltitle = {ACM SIGCOMM Computer Communication Review},
  urldate = {2019-10-04},
  date = {2004-04-01},
  pages = {97},
  author = {Eatherton, Will and Varghese, George and Dittia, Zubin},
  file = {/home/emiapwil/Zotero/storage/T929RMND/Eatherton et al. - 2004 - Tree bitmap hardwaresoftware IP lookups with inc.pdf}
}


